#############################		LOGIN (GET USER) 		############################################
## gets the user using the userName and password
get.user.by.username.and.password.hql=from User u where u.username = :username and u.password = :password

## gets the user using the userName
get.user.by.username.hql=from User u where u.username = :username


#############################		GET DUPLICATE SERVICE REQUEST HQL 		############################################
## gets the service requests for the same user
## get.duplicate.service.request.same.user.hql=from ServiceRequest where userId = :userId and serviceId = :serviceId and preferredDate = :preferredDate and (status = 'New' or status = 'Confirmed')

## gets the service requests for the different user                                        
## get.duplicate.service.request.different.user.hql=from ServiceRequest where serviceId = :serviceId and preferredDate = :preferredDate and (status = 'New' or status = 'Confirmed')

## gets the duplicate service requests
get.duplicate.service.request.hql=from Service_Request where serviceId = :serviceId and preferredDate = :preferredDate and (status = 'New' or status = 'Confirmed')


#############################		AMENITY JOB ORDER DEFINITION SQL 		############################################
## selects all the job order definition for amenities
get.jod.amenity.sql=select a.id as id, jot.id as jobOrderTypeId, a.code, a.description, a.reg_value as regValue, a.uom, a.max_regular as maxRegular, \
					a.excess_value as excessValue, a.created_at as createdAt, a.updated_at as updatedAt from job_order_type jot, amenity a where jot.id \= 1
            
## selects all the job order definition for services
get.jod.service.sql=select s.id as id, jot.id as jobOrderTypeId, s.code, s.description, s.reg_value as regValue, s.uom, s.max_regular as maxRegular, s.excess_value as excessValue, s.created_at as createdAt, s.updated_at as updatedAt from job_order_type jot, service s where jot.id \= 2;

# scalar properties for job order definition bean
get.jod.sql.scalar=id,jobOrderTypeId,code,description,regValue,uom,maxRegular,excessValue,createdAt,updatedAt



#############################		REQUEST BEAN SQL	  ######################################
## selects all the users and concat their names and address, used in the requestor field
get.requestor.sql=select u.id as id, h.id as houseId, Concat (o.firstname, ' ', o.lastname, '-', h.addr_number, ' ', h.addr_street) as requestor from users u, owner o, house h where o.user_id \= u.id and u.status \= 'A' and h.owner_id \= o.id
					
# scalar properties for request bean
get.requestor.sql.scalar=id,houseId,requestor



#############################		OWNER-HOUSE BEAN SQL	  ###################################### CHANGE THIS TO ACCOMODATE LEESEE!!!
## selects all the house for each user and display it as Owner-House Address
# old - get.owner.house.sql=select h.id as houseId, u.id as userId, o.firstname, o.lastname, h.addr_number as houseAddrNumber, h.addr_street as houseAddrStreet, Concat(o.firstname, ' ', o.lastname, ' - ', h.addr_number, ' ', h.addr_street) as ownerHouseLabel from  house h, users u, owner o where o.user_id \= u.id and u.status \= 'A' and h.owner_id \= o.id union all select h.id as houseId, u.id as userId, l.firstname, l.lastname, h.addr_number as houseAddrNumber, h.addr_street as houseAddrStreet, Concat(l.firstname, ' ', l.lastname, ' - ', h.addr_number, ' ', h.addr_street) as ownerHouseLabel from leesee l, house h, users u where l.user_id \= u.id and u.status \= 'A' and l.house_id \= h.id
# THIS IS IN FIRSTNAME_LASTNEME FORMAT # get.owner.house.sql=select * from (select h.id as houseId, u.id as userId, o.firstname, o.lastname, h.addr_number as houseAddrNumber, h.addr_street as houseAddrStreet, Concat(o.firstname, ' ', o.lastname, ' - ', h.addr_number, ' ', h.addr_street) as ownerHouseLabel from  house h, users u, owner o where o.user_id = u.id and u.status = 'A' and h.owner_id = o.id union all select h.id as houseId, u.id as userId, l.firstname, l.lastname, h.addr_number as houseAddrNumber, h.addr_street as houseAddrStreet, Concat(l.firstname, ' ', l.lastname, ' - ', h.addr_number, ' ', h.addr_street) as ownerHouseLabel from leesee l, house h, users u where l.user_id = u.id and u.status = 'A' and l.house_id = h.id) as resultSet order by firstname asc;
get.owner.house.sql=select * from (select h.id as houseId, u.id as userId, o.firstname, o.lastname, h.addr_number as houseAddrNumber, h.addr_street as houseAddrStreet, Concat(o.lastname, ' ', o.firstname, ' - ', h.addr_number, ' ', h.addr_street) as ownerHouseLabel from  house h, users u, owner o where o.user_id = u.id and u.status = 'A' and h.owner_id = o.id union all select h.id as houseId, u.id as userId, l.firstname, l.lastname, h.addr_number as houseAddrNumber, h.addr_street as houseAddrStreet, Concat(l.lastname, ' ', l.firstname, ' - ', h.addr_number, ' ', h.addr_street) as ownerHouseLabel from leesee l, house h, users u where l.user_id = u.id and u.status = 'A' and l.house_id = h.id) as resultSet order by firstname asc;

# scalar properties for owner-house bean
get.owner.house.sql.scalar=houseId,userId,firstname,lastname,houseAddrNumber,houseAddrStreet,ownerHouseLabel



#############################		OWNER BEAN SQL	  ######################################
## selects all the house for each user and display it as Owner-House Address
get.all.owner.sql=select o.id, o.user_id as userId, o.lastname as lastName, o.firstname as firstName, o.middlename as middleName, o.civil_status as civilStatus, \
						o.mobile_number as mobileNumber, o.home_number as homeNumber, o.email_address as emailAddress, o.work_name as workName, o.work_address as workAddress, \
						o.work_landline as workLandline, o.work_mobile as workMobile, o.work_email as workEmail, o.status, o.birthdate as birthDate, o.created_at as createdAt, \
						o.updated_at as updatedAt, Concat(o.firstname, ' ', o.lastname) as ownerName from owner o order by o.firstname asc

# scalar properties for owner-house bean
get.all.owner.sql.scalar=id,userId,lastName,firstName,middleName,civilStatus,mobileNumber,homeNumber,emailAddress,workName,workAddress,workLandline,\
						 workMobile,workEmail,birthDate,createdAt,updatedAt,ownerName
						 
						 
						 
#############################		UPDATE SINGLE OWNER SQL	  ######################################
## updates single owner		
update.single.owner.sql=update owner set birthdate\=\:birthDate, civil_status\=\:civilStatus, email_address\=\:emailAddress, home_number\=\:homeNumber, mobile_number\=\:mobileNumber, work_address\=\:workAddress, work_email\=\:workEmail, work_landline\=\:workLandline, work_mobile\=\:workMobile, work_name\=\:workName, updated_at\=\:updatedAt where id\=\:ownerId and user_id\=\:userId





#############################		GET ALL AMENITIES REQUESTS SQL - ADMIN	  ######################################
## gets all amenities requests for the admin page
get.all.amenities.requests.admin.sql=(select ar.id as id,a.id as amenityId, h.id as houseId, concat(a.code,'-',LPAD(ABS(ar.id),12,'0')) as requestId, Concat(h.addr_number, ' ', h.addr_street) as address, Concat(o.firstname, ' ' , o.lastname) as requestor, a.DESCRIPTION as des, ar.requested_date as requestedDate, ar.START_TIME as startTime, ar.END_TIME as endTime, a.reg_value as basic_cost, ar.additional_cost as additional_cost, ar.total_cost as total_cost, a.uom as uom, ar.STATUS, a.reg_value as regularPrice, a.excess_value as excessPrice,ar.quantity,a.max_regular as maxRegular, ar.remarks as remarks, ar.other_charges as otherCharges, ar.updated_At as updated from amenities_request ar, amenity a, owner o, house h where a.id = ar.amenity_id and o.user_id = ar.user_id and h.owner_id = o.id and ar.house_id = h.id and ar.STATUS in ('Reserved','Booked','New','Change Request')) UNION (select ar.id as id,a.id as amenityId, h.id as houseId, Concat(a.code,'-',LPAD(ABS(ar.id),12,'0')) as requestId, Concat(h.addr_number, ' ', h.addr_street) as address, Concat(l.firstname, ' ' , l.lastname) as requestor, a.DESCRIPTION as des, ar.requested_date as requestedDate, ar.START_TIME as startTime, ar.END_TIME as endTime, a.reg_value as basic_cost, ar.additional_cost as additional_cost, ar.total_cost as total_cost, a.uom as uom, ar.STATUS, a.reg_value as regularPrice, a.excess_value as excessPrice,ar.quantity,a.max_regular as maxRegular, ar.remarks as remarks, ar.other_charges as otherCharges, ar.updated_At as updated from amenities_request ar, amenity a, leesee l, house h where a.id = ar.amenity_id and l.user_id = ar.user_id and l.house_id = l.house_id and ar.house_id = h.id and ar.STATUS in ('Reserved','Booked','New','Change Request')) order by requestedDate asc 

# scalar properties for all amenities requests in the admin page
get.all.amenities.requests.admin.sql.scalar=id,amenityId,houseId,requestId,address,des,requestedDate,startTime,endTime,basic_cost,additional_cost,total_cost,uom,status,requestor,regularPrice,excessPrice,quantity,maxRegular,remarks,otherCharges




#############################		GET ALL SERVICE REQUESTS SQL - ADMIN	  ######################################
## gets all amenities requests for the admin page
get.all.service.requests.admin.sql=(select sr.id as id, Concat(h.addr_number, ' ', h.addr_street) as address, concat(s.code,'-',LPAD(ABS(sr.id),12,'0')) as requestId, Concat(o.firstname, ' ' , o.lastname) as requestor, s.DESCRIPTION as des, sr.preferred_date as preferredDate, s.reg_value as basic_cost,sr.additional_cost, sr.total_cost, sr.confirmed_date as confirmedDate, sr.preferred_time as preferredTime, s.uom as uom, sr.STATUS,s.reg_value as regularPrice, s.excess_value as excessPrice,sr.quantity,s.max_regular as maxRegular, sr.remarks as remarks, sr.other_charges as otherCharges,sr.updated_At as updated from service_request sr, service s, owner o, house h where s.id = sr.service_id and o.user_id = sr.user_id and h.owner_id = o.id and sr.house_id = h.id and sr.STATUS in ('Confirmed','Re-Scheduled','Re-Schedule','New')) UNION (select sr.id as id, Concat(h.addr_number, ' ', h.addr_street) as address, concat(s.code,'-',LPAD(ABS(sr.id),12,'0')) as requestId, Concat(l.firstname, ' ' , l.lastname) as requestor, s.DESCRIPTION as des, sr.preferred_date as preferredDate, s.reg_value  as basic_cost,sr.additional_cost, sr.total_cost, sr.confirmed_date as confirmedDate, sr.preferred_time as preferredTime, s.uom as uom, sr.STATUS, s.reg_value as regularPrice, s.excess_value as excessPrice, sr.quantity,s.max_regular as maxRegular,sr.remarks as remarks, sr.other_charges as otherCharges,sr.updated_At as updated from service_request sr, service s, leesee l, house h where s.ID = sr.SERVICE_ID and l.user_id = sr.user_id and h.id = l.house_id and sr.house_id = h.id and sr.STATUS in ('Confirmed','Re-Scheduled','Re-Schedule','New')) order by preferredDate asc

# scalar properties for all amenities requests in the admin page
get.all.service.requests.admin.sql.scalar=id,address,requestId,des,preferredDate,confirmedDate,preferredTime,basic_cost,additional_cost,total_cost,uom,status,requestor,regularPrice,excessPrice,quantity,maxRegular,remarks,otherCharges


#############################		GET AMENITY REQUEST BASED ON ITS ID HQL 		############################################
## gets the Amenity request based on its id
get.amenity.request.by.id.hql=from AmenitiesRequest ar where ar.id = :id


#############################		GET SERVICE REQUEST BASED ON ITS ID HQL 		############################################
## gets the Service request based on its id
get.service.request.by.id.hql=from ServiceRequest sr where sr.id = :id


#############################		GET HOUSE BASED ON HOUSE ID HQL 		############################################
## gets the house based on the house id
get.house.list.by.house.id.hql=from House where id = :houseId



#############################		GET ALL OWNER 		############################################
## gets all the owner
# get.all.owner.hql=from Owner



#############################		GET OWNER BASED ON OWNER ID HQL 		############################################
## gets the owner based on the owner id
get.owner.by.owner.id.hql=from Owner where id = :ownerId


#############################		GET OWNER BASED ON USER ID HQL 		############################################
## gets the owner based on the user id
get.owner.by.user.id.hql=from Owner where userId = :userId




#############################		GET USER BASED ON USER ID HQL 		############################################
## gets the user based on the user id
get.user.by.user.id.hql=from User where id = :userId



#############################		GET OFFICIAL RECEIPT HQL 		############################################
## gets the official receipt object based on the user id, house id and or number
get.or.hql=from OfficialReceipt where userId = :userId and houseId = :houseId and orNumber = :orNumber


## gets the official receipt header object based on the user id, house id and or number
get.or.header.hql=from OfficialReceiptHeader where userId = :userId and houseId = :houseId and orNumber = :orNumber


## gets the official receipt list for home owner view
get.or.list.hql=from OfficialReceipt where userId = :userId and houseId = :houseId group by orNumber order by id desc limit 10

## gets the official receipt using the or number
get.or.by.or.number.hql=from OfficialReceipt where orNumber= :orNumber


#############################		GET OFFICIAL RECEIPT HQL 		############################################
## gets all the active users
# get.all.active.user.hql=from User where status = 'A' and role_Id != 1

get.all.active.user.sql=select * from (select u.id as id, u.username as username, u.password as password, u.role_id as role_id, u.status as status, u.multi_owner as multiOwner, u.created_at as createdAt, u.updated_at as updatedAt, Concat(o.firstname, ' ', o.lastname) as fullName from users u, owner o where o.user_id = u.id and u.status = 'A' and u.role_id != 1 union all select u.id as id, u.username as username, u.password as password, u.role_id as role_id, u.status as status, u.multi_owner as multiOwner, u.created_at as createdAt, u.updated_at as updatedAt, Concat(l.firstname, ' ', l.lastname) as fullName from users u, leesee l where l.user_id = u.id and u.status = 'A' and u.role_id != 1) as resultSet order by fullName asc

# scalar properties for all the users
get.all.active.user.sql.scalar=id,username,password,role_id,status,multiOwner,createdAt,updatedAt,fullName


#############################		BILLING SQL	  ######################################
# scalar properties for getting the outstanding balances of a user
get.user.outstanding.balances.sql.scalar=id,userId,requestId,orderTypeId,reference,description,requestedDate,postedDate,amount,paidAmount,balance


#############################		MONTHLY STATEMENT SQL	  ######################################
# scalar properties for getting the list of monthly statement for a user
get.user.monthly.statement.list.sql.scalar=id,postedDate,description,houseId,reportName

## gets the SOAHeader object
get.soa.header.hql=from SOAHeader where userId = :userId and houseId = :houseId and billingMonth = :billingMonth

## gets the SOASummary object
get.soa.summary.hql=from SOASummary where id = :id


#############################		RATES HQL  ######################################
## gets the rates from the database
get.rates.hql=from Rates r

## gets the rates based on its code (ex: assocdue)
get.rates.by.code.hql=from Rates r where code = :code


#############################		ADJUSTMENT HQL  ######################################
## gets all the adjustments from the database
get.adjustments.hql=from Adjustment a

## gets the adjustments based on the user id and house id (NOTE: Penalties are not included)
get.adjustments.by.userid.houseid.hql=from Adjustment adj where adj.userId = :userId and adj.houseId = :houseId and adj.type = 'A'

## gets the adjustment based on its id (NOTE: This includes Adjustment type and Penalty type)
get.adjustment.by.id.hql=from Adjustment adj where adj.id = :id


############################		LEDGER / LEDGER SUMMARY HQL  ######################################
## gets all the ledger summary from the database
get.all.ledger.summary.hql=from LedgerSummary ls

## gets the adjustments based on the user id and house id
get.ledger.summary.by.houseid.hql=from LedgerSummary ls where ls.houseId = :houseId


#############################		HOUSE BEAN SQL	  ######################################
## gets the houses from the database
get.all.houses.sql=select h.id as houseId, owner_id as ownerId, o.user_id as userId, Concat(h.addr_number, ' ', h.addr_street) as address from house h, users u, owner o where h.owner_id = o.id
get.all.houses.sql.scalar=houseId,ownerId,userId,address


#############################		GET ASSOCIATION DUE HQL 		############################################
## gets the association due by userid and houseid
get.association.due.by.userid.houseid.hql=from AssociationDue ad where ad.userId = :userId and ad.houseId = :houseId